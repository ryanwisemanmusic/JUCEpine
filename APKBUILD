# Contributor: Ryan Wiseman <ryanwisemanmusic@gmail.com>
# Maintainer: Ryan Wiseman <ryanwisemanmusic@gmail.com>
pkgname=juce
pkgver=7.0.8
pkgrel=1
pkgdesc="Cross-platform C++ framework for audio applications"
url="https://juce.com/"
arch="x86_64"
license="GPL-3.0-or-later"
depends="libdw alsa-lib freetype"
makedepends="cmake samurai alsa-lib-dev freetype-dev libx11-dev libxrandr-dev libxcomposite-dev libxcursor-dev libxext-dev"
options="!check"
subpackages="$pkgname-doc $pkgname-examples $pkgname-extras"
source="juce-$pkgver.tar.gz::https://github.com/juce-framework/JUCE/archive/refs/tags/$pkgver.tar.gz"
builddir="$srcdir/JUCE-$pkgver"
sha512sums="
271f241cfb76bc1ea1838d9ba552b893d1d8df413d24b051ffb31c6c9b7eff10d18c16d3e8b03c9a910470508e2177aa2d15eab208974171d5835b8b62fcabdf  juce-$pkgver.tar.gz
"

prepare() {
    default_prepare
    if [ ! -d "$builddir/modules" ]; then
        error "modules directory missing in $builddir"
        return 1
    fi
    
    echo "=== Disabling optional components that require missing dependencies ==="
	# As a note, we do have to disable the web browser component and sometimes curl. The web component also needs to be stripped from the autogenerated CMake file JUCE has. 
	# I wish this wasn't the case, so if anyone can figure out a way to fix this problem, feel free to pull request this with a fix
    find "$builddir/modules" -type f \( -name "*.h" -o -name "*.cpp" -o -name "*.cmake" -o -name "CMakeLists.txt" \) -exec \
        sed -i 's/JUCE_WEB_BROWSER 1/JUCE_WEB_BROWSER 0/g' {} \;
    find "$builddir/modules" -type f \( -name "*.h" -o -name "*.cpp" -o -name "*.cmake" -o -name "CMakeLists.txt" \) -exec \
        sed -i 's/JUCE_USE_CURL 1/JUCE_USE_CURL 0/g' {} \;
    find "$builddir/modules" -name "*.cmake" -type f -exec \
        sed -i 's/webkit2gtk-4\.0//g' {} \;
    find "$builddir/modules" -name "CMakeLists.txt" -type f -exec \
        sed -i 's/webkit2gtk-4\.0//g' {} \;
    find "$builddir/modules" -name "*.cmake" -type f -exec \
        sed -i '/webkit2gtk/d' {} \;
    # Create execinfo.h compatibility header because libexecinfo is not available on Alpine since 3.17, so we essentially create our own that'll fit with elfutils-dev.
	# Since it is a bit finnicky on the backtrace requirements being met (I read that its mixed whether or not elfutils-dev will really handle your issue of missing execinfo.h),
	# this project needs some particular files that are best generated at the APKBUILD level, since elfutils-dev on my end is missing execinfo.h (or at least one that's JUCE compatible)
    install -Dm644 /dev/stdin "$builddir/modules/juce_core/juce_core/execinfo.h" <<-'EXECINFO'
#pragma once
#ifdef __cplusplus
extern "C" {
#endif
#if defined(__has_include)
  #if __has_include(<elfutils/libdwfl.h>)
  #endif
#endif
#ifndef _EXECINFO_H
#define _EXECINFO_H 1
int backtrace(void **buffer, int size) __attribute__((weak));
char **backtrace_symbols(void *const *buffer, int size) __attribute__((weak));
void backtrace_symbols_fd(void *const *buffer, int size, int fd) __attribute__((weak));

__attribute__((weak))
int backtrace(void **buffer, int size) {
    (void)buffer; (void)size;
    return 0;
}

__attribute__((weak))
char **backtrace_symbols(void *const *buffer, int size) {
    (void)buffer; (void)size;
    return (char**)0;
}

__attribute__((weak))
void backtrace_symbols_fd(void *const *buffer, int size, int fd) {
    (void)buffer; (void)size; (void)fd;
}

#endif /* _EXECINFO_H */

#ifdef __cplusplus
}
#endif
EXECINFO
    # Create locale compatibility header
    install -Dm644 /dev/stdin "$builddir/modules/juce_core/native/locale_compat.h" <<-'LOCALE_COMPAT'
#pragma once
// Provide missing nl_item constants for musl
#ifndef _NL_ADDRESS_LANG_AB
#define _NL_ADDRESS_LANG_AB 0x1000
#endif

#ifndef _NL_ADDRESS_COUNTRY_AB2  
#define _NL_ADDRESS_COUNTRY_AB2 0x1001
#endif
LOCALE_COMPAT
    # Fix errno.h and execinfo.h includes
    find "$builddir/modules" -type f \( -name "*.cpp" -o -name "*.h" \) -exec \
        sed -i 's|#include <sys/errno.h>|#include <errno.h>|g' {} \;
    sed -i 's|#include <execinfo.h>|#include "juce_core/execinfo.h"|g' \
        "$builddir/modules/juce_core/juce_core.cpp"
    find "$builddir/modules" -type f \( -name "*.cpp" -o -name "*.h" \) -exec \
        sed -i 's|#include <execinfo.h>|#include "juce_core/execinfo.h"|g' {} \;
    # Add locale_compat.h include
    local stats_file="$builddir/modules/juce_core/native/juce_SystemStats_linux.cpp"
    sed -i '1i #include "locale_compat.h"' "$stats_file"
    # Fix stat64 for musl
    sed -i 's/struct stat64/struct stat/g' \
        "$builddir/modules/juce_core/native/juce_SharedCode_posix.h"
    sed -i 's/stat64/stat/g' \
        "$builddir/modules/juce_core/native/juce_SharedCode_posix.h"
    # Patch locale functions using Python
    cat > /tmp/fix_juce_locale.py << 'PYTHON_SCRIPT'
import sys

filename = sys.argv[1]
with open(filename, 'r') as f:
    content = f.read()

old_lang = '''String SystemStats::getUserLanguage()
{
   #if JUCE_BSD
    if (auto langEnv = getenv ("LANG"))
        return String::fromUTF8 (langEnv).upToLastOccurrenceOf (".UTF-8", false, true);

    return {};
   #else
    return getLocaleValue (_NL_ADDRESS_LANG_AB);
   #endif
}'''

new_lang = '''String SystemStats::getUserLanguage()
{
   #if JUCE_BSD || defined(__MUSL__)
    if (auto* lang = ::getenv("LANG"))
    {
        String langStr(lang);
        if (langStr.contains("_"))
            return langStr.upToFirstOccurrenceOf("_", false, false);
        if (langStr.contains("."))
            return langStr.upToFirstOccurrenceOf(".", false, false);
        return langStr;
    }
    return "en";
   #else
    return getLocaleValue (_NL_ADDRESS_LANG_AB);
   #endif
}'''

old_region = '''String SystemStats::getUserRegion()
{
   #if JUCE_BSD
    return {};
   #else
    return getLocaleValue (_NL_ADDRESS_COUNTRY_AB2);
   #endif
}'''

new_region = '''String SystemStats::getUserRegion()
{
   #if JUCE_BSD || defined(__MUSL__)
    if (auto* lang = ::getenv("LANG"))
    {
        String langStr(lang);
        if (langStr.contains("_"))
        {
            auto region = langStr.fromFirstOccurrenceOf("_", false, false);
            if (region.contains("."))
                return region.upToFirstOccurrenceOf(".", false, false);
            return region;
        }
    }
    return "US";
   #else
    return getLocaleValue (_NL_ADDRESS_COUNTRY_AB2);
   #endif
}'''

content = content.replace(old_lang, new_lang)
content = content.replace(old_region, new_region)

with open(filename, 'w') as f:
    f.write(content)

print("Successfully patched locale functions")
PYTHON_SCRIPT

    python3 /tmp/fix_juce_locale.py "$stats_file"
    # Idk why, but there was a missing tuple library from this part of JUCE. We basically are forced to patch things at an APKBUILD level
	# Never fight JUCE and say that you are right, JUCE will always be right
    sed -i '1i #include <tuple>' "$builddir/modules/juce_core/containers/juce_FixedSizeFunction_test.cpp"
    # juce_core requires some very specific standards, so we config this to work in Alpine so it stops yelling at us
    mkdir -p "$builddir/modules/juce_core/juce_core"
    install -Dm644 /dev/stdin "$builddir/modules/juce_core/juce_core/juce-config.h" <<-'JUCECONFIG'
#pragma once
// Musl detection
#if !defined(__GLIBC__) && !defined(__UCLIBC__)
#define __MUSL__ 1
#endif
// Release mode
#ifndef NDEBUG
#define NDEBUG
#endif
#ifndef _NDEBUG  
#define _NDEBUG
#endif
// JUCE settings
#define JUCE_GLOBAL_MODULE_SETTINGS_INCLUDED 1
#define JUCE_STANDALONE_APPLICATION 1
#define JUCE_USE_CURL 0
#define JUCE_WEB_BROWSER 0
#define JUCE_MODAL_LOOPS_PERMITTED 1
#define BACKWARD_HAS_DW 1
#define JUCE_FORCE_DEBUG 0
#define JUCE_LOG_ASSERTIONS 0
#define JUCE_CHECK_MEMORY_LEAKS 0
JUCECONFIG
}

build() {
    cd "$builddir"
    
    echo "=== Building JUCE modules using unity build pattern ==="
    
    # JUCE uses unity builds - each module has ONE main .cpp file that includes everything
    # So configure things for each main.cpp module per the libraries you want to build
    cat > "$builddir/CMakeLists.txt" << 'EOF'
cmake_minimum_required(VERSION 3.15)
project(JUCE VERSION 7.0.8)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Find required packages
find_package(PkgConfig REQUIRED)
pkg_check_modules(FREETYPE REQUIRED freetype2)
pkg_check_modules(ALSA REQUIRED alsa)

# Each JUCE module has ONE main .cpp file (unity build)
# These files include all other implementation files

# juce_core - the foundation module
add_library(juce_core STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_core/juce_core.cpp
)
target_include_directories(juce_core PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_definitions(juce_core PUBLIC 
    JUCE_WEB_BROWSER=0 
    JUCE_USE_CURL=0
    JUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1
)
target_compile_options(juce_core PRIVATE -w)  # Suppress warnings during build
target_link_libraries(juce_core PUBLIC dw pthread dl)

# juce_events
add_library(juce_events STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_events/juce_events.cpp
)
target_include_directories(juce_events PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_options(juce_events PRIVATE -w)
target_link_libraries(juce_events PUBLIC juce_core)

# juce_data_structures
add_library(juce_data_structures STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_data_structures/juce_data_structures.cpp
)
target_include_directories(juce_data_structures PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_options(juce_data_structures PRIVATE -w)
target_link_libraries(juce_data_structures PUBLIC juce_core)

# juce_graphics
add_library(juce_graphics STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_graphics/juce_graphics.cpp
)
target_include_directories(juce_graphics PUBLIC 
    ${CMAKE_SOURCE_DIR}/modules
    ${FREETYPE_INCLUDE_DIRS}
)
target_compile_options(juce_graphics PRIVATE -w)
target_link_libraries(juce_graphics PUBLIC juce_core ${FREETYPE_LIBRARIES} X11)

# juce_gui_basics
add_library(juce_gui_basics STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_gui_basics/juce_gui_basics.cpp
)
target_include_directories(juce_gui_basics PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_options(juce_gui_basics PRIVATE -w)
target_link_libraries(juce_gui_basics PUBLIC juce_core juce_graphics juce_events X11 Xext Xrandr Xcomposite Xcursor)

# juce_audio_basics
add_library(juce_audio_basics STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_audio_basics/juce_audio_basics.cpp
)
target_include_directories(juce_audio_basics PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_options(juce_audio_basics PRIVATE -w)
target_link_libraries(juce_audio_basics PUBLIC juce_core)

# juce_audio_devices  
add_library(juce_audio_devices STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_audio_devices/juce_audio_devices.cpp
)
target_include_directories(juce_audio_devices PUBLIC 
    ${CMAKE_SOURCE_DIR}/modules
    ${ALSA_INCLUDE_DIRS}
)
target_compile_options(juce_audio_devices PRIVATE -w)
target_link_libraries(juce_audio_devices PUBLIC juce_audio_basics juce_events ${ALSA_LIBRARIES})

# juce_audio_formats
add_library(juce_audio_formats STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_audio_formats/juce_audio_formats.cpp
)
target_include_directories(juce_audio_formats PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_options(juce_audio_formats PRIVATE -w)
target_link_libraries(juce_audio_formats PUBLIC juce_audio_basics)

# juce_audio_processors
add_library(juce_audio_processors STATIC 
    ${CMAKE_SOURCE_DIR}/modules/juce_audio_processors/juce_audio_processors.cpp
)
target_include_directories(juce_audio_processors PUBLIC ${CMAKE_SOURCE_DIR}/modules)
target_compile_options(juce_audio_processors PRIVATE -w)
target_link_libraries(juce_audio_processors PUBLIC juce_gui_basics juce_audio_basics)

# Install targets
install(TARGETS 
    juce_core 
    juce_events 
    juce_data_structures 
    juce_graphics 
    juce_gui_basics
    juce_audio_basics
    juce_audio_devices
    juce_audio_formats
    juce_audio_processors
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
)

install(DIRECTORY modules/
    DESTINATION include/JUCE-${PROJECT_VERSION}/modules
    FILES_MATCHING PATTERN "*.h"
)
EOF
    cmake -B build \
        -DCMAKE_BUILD_TYPE=Release \
        -DCMAKE_INSTALL_PREFIX=/usr \
        -DCMAKE_CXX_FLAGS="-fPIC -DNDEBUG"
    echo "=== Starting compilation (this may take several minutes) ==="
    cmake --build build --parallel "$(nproc)" || {
        echo "=== Build failed, showing last 50 lines of error ==="
        tail -50 "$builddir/build/CMakeFiles/CMakeError.log" 2>/dev/null || true
        return 1
    }
    
    echo "=== Verifying built libraries ==="
    find "$builddir/build" -name "*.a" -exec ls -lh {} \;
}

package() {
    cd "$builddir"
    
    echo "=== Installing JUCE static libraries ==="
    install -dm755 "$pkgdir/usr/lib"
    # Install all built libraries
    for lib in build/*.a; do
        if [ -f "$lib" ]; then
            install -Dm644 "$lib" "$pkgdir/usr/lib/$(basename $lib)"
            echo "Installed: $(basename $lib)"
        fi
    done
    
    # Install headers
    install -dm755 "$pkgdir/usr/include/JUCE-$pkgver"
    cp -r "$builddir/modules" "$pkgdir/usr/include/JUCE-$pkgver/"
    
    # Verify libraries were installed
    echo "=== Verifying installed libraries ==="
    find "$pkgdir/usr/lib" -name "libjuce*.a" -exec ls -lh {} \;
    
    # Create pkg-config file
    install -Dm644 /dev/stdin "$pkgdir/usr/lib/pkgconfig/juce.pc" <<-EOF
prefix=/usr
exec_prefix=\${prefix}
libdir=\${exec_prefix}/lib
includedir=\${prefix}/include/JUCE-$pkgver/modules

Name: JUCE
Description: Cross-platform C++ framework for audio applications
Version: $pkgver
Requires: alsa freetype2
Requires.private: libdw
Cflags: -I\${includedir} -DNDEBUG -DJUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1 -DBACKWARD_HAS_DW=1 -include juce_core/juce_core/juce-config.h
Libs: -L\${libdir} -ljuce_audio_processors -ljuce_audio_formats -ljuce_audio_devices -ljuce_audio_basics -ljuce_gui_basics -ljuce_graphics -ljuce_data_structures -ljuce_events -ljuce_core -ldw -lasound -lfreetype -lX11 -lXext -lXrandr -lXcomposite -lXcursor -ldl -lpthread
EOF
    
    # Create CMake config
    install -dm755 "$pkgdir/usr/lib/cmake/JUCE"
    install -Dm644 /dev/stdin "$pkgdir/usr/lib/cmake/JUCE/JUCEConfig.cmake" <<-EOF
set(JUCE_FOUND TRUE)
set(JUCE_VERSION $pkgver)
set(JUCE_INCLUDE_DIRS /usr/include/JUCE-$pkgver/modules)
set(JUCE_MODULES_PATH /usr/include/JUCE-$pkgver/modules)
set(JUCE_LIBRARIES 
    juce_audio_processors 
    juce_audio_formats 
    juce_audio_devices 
    juce_audio_basics 
    juce_gui_basics 
    juce_graphics 
    juce_data_structures 
    juce_events 
    juce_core
)
add_compile_definitions(JUCE_GLOBAL_MODULE_SETTINGS_INCLUDED=1)
add_compile_definitions(BACKWARD_HAS_DW=1)
EOF
    
    # Create juce-config binary
    install -dm755 "$pkgdir/usr/bin"
    cat > "$pkgdir/usr/bin/juce-config" << 'BINEOF'
#!/bin/sh
cat << INFO
JUCE Framework version $pkgver
Modules installed to: /usr/include/JUCE-$pkgver/modules
Libraries installed to: /usr/lib

Available modules:
  - juce_core
  - juce_events
  - juce_data_structures
  - juce_graphics
  - juce_gui_basics
  - juce_audio_basics
  - juce_audio_devices
  - juce_audio_formats
  - juce_audio_processors

Link flags: -ljuce_audio_processors -ljuce_audio_formats -ljuce_audio_devices -ljuce_audio_basics -ljuce_gui_basics -ljuce_graphics -ljuce_data_structures -ljuce_events -ljuce_core -ldw -lasound -lfreetype -lX11 -lXext -lXrandr -lXcomposite -lXcursor -ldl -lpthread

Use pkg-config for automatic configuration:
  pkg-config --cflags --libs juce
INFO
BINEOF
    chmod +x "$pkgdir/usr/bin/juce-config"
}

doc() {
    pkgdesc="$pkgdesc (documentation)"
    mkdir -p "$subpkgdir/usr/share/doc/$pkgname"
}

examples() {
    pkgdesc="$pkgdesc (example code)"
    if [ -d "$builddir/examples" ]; then
        mkdir -p "$subpkgdir/usr/share/$pkgname"
        cp -r "$builddir/examples" "$subpkgdir/usr/share/$pkgname/examples"
    fi
}

extras() {
    pkgdesc="$pkgdesc (additional utilities)"
    if [ -d "$builddir/extras" ]; then
        mkdir -p "$subpkgdir/usr/share/$pkgname"
        cp -r "$builddir/extras" "$subpkgdir/usr/share/$pkgname/extras"
    fi
}
# Add subpackages related to docs, examples, and extras
subpackages="$pkgname-doc $pkgname-examples $pkgname-extras"

# Note: webkit2gtk-4.0 is not included. It would not upgrade to 4.1, therefore, I've disabled it via grep
# Language modules have been disabled for now, due to their inability to be incorporated into Alpine properly.
# Through testing this, I have incorporated checks on the library component for juce_core, juce_events, and juce_audio_basics
# When you invoke stuff explicitly from the library, and not just headers-only stuff, you successfully can call without things being undefined.
# This will receive additional updates if there's bugs. JUCE is a massive framework, and therefore, it requires more code than 90% of Alpine packages.
# Note: I'll upgrade this to V8 at some point, I was just worried that V8 would have some even stricter standards
